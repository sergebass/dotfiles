# shared configuration for all supported versions of tmux

# set -g default-command "/bin/zsh"

# use screen-256color for FreeBSD (without BCE)
set -g default-terminal "screen-256color-bce"

set -g lock-command "away -C -m Locked"

set -g wrap-search off

set-option -g history-limit 100000

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

set -g allow-rename off
set-option -g renumber-windows on

# set window titles using xterm sequences
set -g set-titles on
set -g set-titles-string "#h [#S] #I:#W - tmux"

# set-window-option -g xterm-keys on

# make cursor change shapes even under tmux (a workaround for neovim)
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

set -g mouse on

# Allows for faster key repetition
set -s escape-time 0

# A delay for commands that do not require repeated prefix use, milliseconds
set -g repeat-time 1000

# active pane normal, other shaded out
setw -g window-style fg=colour240,bg=default
setw -g window-active-style fg=colour252,bg=default

setw -g pane-border-style fg=white,bg=black
setw -g pane-active-border-style fg=brightyellow,bold,bg=colour28

set -g message-style fg=yellow,bold,bg=colour19

setw -g window-status-format "#I#F:#W"
setw -g window-status-current-format "#I#F:#W"
setw -g window-status-separator "  "
setw -g window-status-style fg=colour253,bg=colour17
setw -g window-status-current-style fg=colour16,bold,bg=colour220
setw -g window-status-activity-style fg=colour51,bg=colour17

setw -g status-style fg=white,bright,bg=colour17

set -g status-left-length 40
set -g status-left "#[fg=brightyellow,bold,bg=colour28]#H#[fg=green,bg=colour17] [#S] "

set -g status-right-length 120
set -g status-right "#[fg=yellow, bg=colour17] â™ª#(sp-get-audio-volume) #[fg=cyan, bg=colour17]#(sp-get-audio-track) #[fg=white]#(~/.tmux/plugins/tmux-mem-cpu-load/tmux-mem-cpu-load --mem-mode 1 --cpu-mode 1 --graph-lines 0 --interval 2 --colors) #[fg=brightyellow,bg=colour28]%u:%Y-%m-%d#[fg=colour51,bold,bg=colour17] #[fg=brightyellow,bg=colour28]%R"

set -g status-interval 5
set -g status-justify left

set -g status-keys vi

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity off

# -- KEY BINDINGS ---

setw -g mode-keys vi

# C-b is not acceptable -- Vim uses it
unbind C-b

# Use both C-Space and M-Space to send tmux prefix (depending on the OS/GUI limitations)
# Press the prefix twice to send it through to the underlying application
set-option -g prefix C-Space
set-option -g prefix2 M-Space
bind C-Space send-prefix
bind M-Space send-prefix -2

bind r source-file ~/.tmux.conf \; display "tmux configuration reloaded!"

# copy/paste buffer and clipboard management
set-option -s set-clipboard off

bind Z lock-session

bind Escape split-window -hf "htop"

bind Y run -b "tmux save-buffer - | xclip -in -selection clipboard"
bind P run -b "tmux set-buffer \"$(xclip -out -selection clipboard)\"; tmux paste-buffer"

unbind p
bind p paste-buffer

unbind v
bind v copy-mode

# Use Ctrl+] in copy mode to open selected file under cursor in the already running neovim instance (via nvr)
bind -T copy-mode-vi C-] send-keys -X copy-pipe-and-cancel "xargs -I {} tmux run-shell -b 'cd #{pane_current_path}; nvr --remote -O \"{}\" > /dev/null'"
# bind -T copy-mode-vi C-] send-keys -X copy-pipe-and-cancel "xargs -I {} tmux send-keys 'nvr --remote -O \"{}\"'; tmux send-keys 'C-m'"

# bind P pipe-pane -o "cat >> ~/tmux-#W.log" \; display "Toggled logging to ~/tmux-#W.log"

bind S set-window-option synchronize-panes  # on/off toggle

# use these shortcuts to use current pane/window directory for new windows and panes
bind c new-window -c '#{pane_current_path}'
bind Enter new-window -c '#{pane_current_path}'

bind \ split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

bind = select-layout tiled
bind | select-layout even-horizontal
bind _ select-layout even-vertical

unbind '['
unbind '['
bind -r '[' select-window -t -1
bind -r ']' select-window -t +1

bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9
bind 0 select-window -t 10

bind M-1 select-window -t 1
bind M-2 select-window -t 2
bind M-3 select-window -t 3
bind M-4 select-window -t 4
bind M-5 select-window -t 5
bind M-6 select-window -t 6
bind M-7 select-window -t 7
bind M-8 select-window -t 8
bind M-9 select-window -t 9
bind M-0 select-window -t 10

bind Tab last-window
bind M-Tab last-window

unbind '{'
unbind '}'
bind -r '{' swap-window -d -t -1
bind -r '}' swap-window -d -t +1

# duplicate pane motion bindings without arrow keys;

bind -r M-h select-pane -L
bind -r M-j select-pane -D
bind -r M-k select-pane -U
bind -r M-l select-pane -R

# pane resizing (without arrow keys)

bind -r M-< resize-pane -L 4
bind -r M-> resize-pane -R 4
bind -r M-( resize-pane -U 4
bind -r M-) resize-pane -D 4

# pane resizing (with arrow keys, slightly tweaked)

bind -r M-Up resize-pane -U 4
bind -r M-Down resize-pane -D 4
bind -r M-Left resize-pane -L 4
bind -r M-Right resize-pane -R 4

# pane rearrangemenet bindings, borrowed from https://stackoverflow.com/a/27450841
# "flipping the orientation of the current pane with the pane before it (in the ordering)"
bind M-f move-pane -t '.-'
bind M-r move-pane -h -t '.-'

# audio control bindings use their own prefix
bind ` switch-client -T audio

# audio volume control

bind -T audio ` new-window "sp-audio-volume-control"

bind -r -T audio [ run "sp-decrease-audio-volume"
bind -r -T audio ] run "sp-increase-audio-volume"

bind -r -T audio Down run "sp-decrease-audio-volume"
bind -r -T audio Up run "sp-increase-audio-volume"

bind -r -T audio \ run "sp-toggle-audio-mute"

# audio volume control (PulseAudio)

bind -r -T audio 1 run "pactl set-sink-volume @DEFAULT_SINK@ 10%"
bind -r -T audio 2 run "pactl set-sink-volume @DEFAULT_SINK@ 20%"
bind -r -T audio 3 run "pactl set-sink-volume @DEFAULT_SINK@ 30%"
bind -r -T audio 4 run "pactl set-sink-volume @DEFAULT_SINK@ 40%"
bind -r -T audio 5 run "pactl set-sink-volume @DEFAULT_SINK@ 50%"
bind -r -T audio 6 run "pactl set-sink-volume @DEFAULT_SINK@ 60%"
bind -r -T audio 7 run "pactl set-sink-volume @DEFAULT_SINK@ 70%"
bind -r -T audio 8 run "pactl set-sink-volume @DEFAULT_SINK@ 80%"
bind -r -T audio 9 run "pactl set-sink-volume @DEFAULT_SINK@ 90%"
bind -r -T audio 0 run "pactl set-sink-volume @DEFAULT_SINK@ 100%"

# audio volume control (ALSA/Linux)

# bind -r -T audio 1 run "amixer -D pulse set Master 10%"
# bind -r -T audio 2 run "amixer -D pulse set Master 20%"
# bind -r -T audio 3 run "amixer -D pulse set Master 30%"
# bind -r -T audio 4 run "amixer -D pulse set Master 40%"
# bind -r -T audio 5 run "amixer -D pulse set Master 50%"
# bind -r -T audio 6 run "amixer -D pulse set Master 60%"
# bind -r -T audio 7 run "amixer -D pulse set Master 70%"
# bind -r -T audio 8 run "amixer -D pulse set Master 80%"
# bind -r -T audio 9 run "amixer -D pulse set Master 90%"
# bind -r -T audio 0 run "amixer -D pulse set Master 100%"

# audio volume control (OSS/FreeBSD)

# bind -r -T audio 1 run "mixer vol 10"
# bind -r -T audio 2 run "mixer vol 20"
# bind -r -T audio 3 run "mixer vol 30"
# bind -r -T audio 4 run "mixer vol 40"
# bind -r -T audio 5 run "mixer vol 50"
# bind -r -T audio 6 run "mixer vol 60"
# bind -r -T audio 7 run "mixer vol 70"
# bind -r -T audio 8 run "mixer vol 80"
# bind -r -T audio 9 run "mixer vol 90"
# bind -r -T audio 0 run "mixer vol 100"

# audio volume control (Mac OS X)

# bind -r -T audio 1 run "osascript -e 'set volume output volume 10'"
# bind -r -T audio 2 run "osascript -e 'set volume output volume 20'"
# bind -r -T audio 3 run "osascript -e 'set volume output volume 30'"
# bind -r -T audio 4 run "osascript -e 'set volume output volume 40'"
# bind -r -T audio 5 run "osascript -e 'set volume output volume 50'"
# bind -r -T audio 6 run "osascript -e 'set volume output volume 60'"
# bind -r -T audio 7 run "osascript -e 'set volume output volume 70'"
# bind -r -T audio 8 run "osascript -e 'set volume output volume 80'"
# bind -r -T audio 9 run "osascript -e 'set volume output volume 90'"
# bind -r -T audio 0 run "osascript -e 'set volume output volume 100'"

# mpd song playback controls
bind -T audio '-' new-window "ncmpcpp"

bind -T audio -r { run "mpc prev"
bind -T audio -r } run "mpc next"

bind -T audio -r Left run "mpc prev"
bind -T audio -r Right run "mpc next"

bind -T audio | run "mpc toggle"

# ------------
# tmux plugins
# ------------

set -g @open 'O'
set -g @open-editor 'C-o'
set -g @open-S 'https://www.duckduckgo.com/'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'thewtex/tmux-mem-cpu-load'

# automatically install tmux plugin manager if it's not installed yet
#if "test ! -d ~/.tmux/plugins/tpm" \
#   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run '~/.tmux/plugins/tpm/tpm'
