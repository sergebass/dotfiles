# ------------------
# tmux configuration
# ------------------

# some ways to implement version-dependent configuration:
#
# from https://stackoverflow.com/a/40902312/11947969
# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
# run 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# if -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' " \
#     "set -g mouse-select-pane on; set -g mode-mouse on;" \
#     "set -g mouse-resize-pane on; set -g mouse-select-window on"

# %if #{<=:#{version},9.9}
# set -g status-style bg=red
# %else
# set -g status-style bg=green
# %endif

# set -g default-command "/bin/zsh"

if -b "uname | grep -qE 'Linux|Darwin'" {
    # BCE = Background Color Erasure
    set -g default-terminal "screen-256color-bce"
}

if -b "uname | grep -q FreeBSD" {
    # no BCE in FreeBSD 12
    set -g default-terminal "screen-256color"
}

# uncomment for tmux 3.2+
# set -as terminal-features ',rxvt-unicode-256color:clipboard'

# make cursor change shapes even under tmux (a workaround for neovim)
set -gas terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

set -g lock-command "away -C -m Locked"

set -g wrap-search off

set-option -g history-limit 100000

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

set -g allow-rename off
set-option -g renumber-windows on

# set window titles using xterm sequences
set -g set-titles on
set -g set-titles-string "#h [#S] #I_#P:#W - tmux"

# set-window-option -g xterm-keys on

set -g mouse on

# Allows for faster key repetition
set -s escape-time 0

# A delay for commands that do not require repeated prefix use, milliseconds
set -g repeat-time 1000

# active pane normal, other shaded out
setw -g window-style fg=colour240,bg=default
setw -g window-active-style fg=colour252,bg=default

setw -g pane-border-style fg=white,bg=black
setw -g pane-active-border-style fg=brightyellow,bold,bg=colour28

set -g message-style fg=yellow,bold,bg=colour19
set -g message-limit 1000

setw -g window-status-format " #I#F:#W "
setw -g window-status-current-format " #I_#P#F:#W "
setw -g window-status-separator ""
setw -g window-status-style fg=colour253,bg=colour17
setw -g window-status-current-style fg=colour16,bold,bg=colour220
setw -g window-status-activity-style fg=colour51,bg=colour17

setw -g status-style fg=white,bright,bg=colour17

set -g status-left-length 40
set -g status-left "#[fg=yellow, bg=colour17]⚡#{battery_color_fg}#{battery_color_bg}#{battery_percentage}#[bg=colour17] #[fg=brightyellow, none, bg=colour28]#H#[fg=green, bold, bg=colour17] [#S]"

set -g status-right-length 120
set -g status-right "#[fg=yellow, bg=colour17] #[fg=brightyellow, bg=colour28]%u:%Y-%m-%d#[fg=colour51, bold, bg=colour17] #[fg=brightyellow, bg=colour28]%R"

set -g status-interval 5
set -g status-justify left

# use two lines for our status bar
set -g status 2

# FIXME uncomment when fixed
# status line 1
# set -g status-format[0] "#[range=left]#[align=left]#[fg=brightyellow, bold, bg=colour28]#H#[fg=green, bg=colour17] [#S] #[fill=colour17]"
# set -ag status-format[0] "#[range=window]#[list=left-marker]#{W:#{E:window-status-format},#{E:window-status-current-format}}#[list=right-marker]"
# set -ag status-format[0] " #[align=right]#[range=right]#[fg=brightyellow, bg=colour28]%u:%Y-%m-%d#[fg=colour51, bold, bg=colour17] #[fg=brightyellow, bg=colour28]%R"
# set -ag status-format[0] "#[fg=yellow, bg=colour17] ⚡#{battery_color_fg}#{battery_color_bg}#{battery_percentage}"

# status line 2
set -g status-format[1] "#[align=left]#[fg=yellow, bold, bg=colour17]#[fg=cyan, none, bg=colour17]#(uname -sr) #[fg=white]#(~/.tmux/plugins/tmux-mem-cpu-load/tmux-mem-cpu-load --mem-mode 1 --cpu-mode 1 --graph-lines 0 --interval 2 --colors)#[fill=colour17]"
set -ag status-format[1] " #[align=right]#[fg=colour113, bg=colour17]#(mpc | head -2 | sed -e 'N;s/\\n/ /' -e 's/  */ /g' -e 's/\\[playing\\]/#[push-default]#[fg=colour34]▶#[fg=default]#[pop-default]/' -e 's/\\[paused\\]/#[push-default]#[fg=colour220]❚❚#[fg=default]#[pop-default]/') "
set -ag status-format[1] "#[fg=red, bold, bg="#400000"] ● #[fg=white, bg="#400000"]#(sp-get-audio-mic-levels)#[fg=colour48, bg="#004000"] ♪ #[fg=white, bg="#004000"]#(sp-get-audio-volume)"

set -g status-keys vi

# invoke htop if the left button is clicked in the left part of the status bar
bind -n MouseDown1StatusLeft new-window "htop"

# display calendar for the entire year if the left button is clicked in the right part of the status bar
bind -n MouseDown1StatusRight new-window "cal -y && read -n"

# launch our music player if the right button is clicked in the right part of the status bar
bind -n MouseDown3StatusRight new-window "ncmpcpp"

# turn on focus-events to use pane-focus-in and pane-focus-out hooks
set -g focus-events on

# when a pane is focused, change the background color of the pane to default (transparent)
set-hook -g pane-focus-in "select-pane -P bg=default"

# when a pane is unfocused, change the background color of all panes to dark grey
set-hook -g pane-focus-out "setw synchronize-panes on \; select-pane -P bg="#303030" \; setw synchronize-panes off"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity off

# display all messages for 1.5 seconds
set -g display-time 1500

# -- KEY BINDINGS ---

setw -g mode-keys vi

# C-b is not acceptable -- Vim uses it
unbind C-b

# Use both C-Space and M-Space to send tmux prefix (depending on the OS/GUI limitations)
# Press the prefix twice to send it through to the underlying application
set-option -g prefix C-Space
set-option -g prefix2 M-Space
bind C-Space send-prefix
bind M-Space send-prefix -2

bind r source-file ~/.tmux.conf \; display "tmux configuration reloaded!"

bind Z lock-session

bind Escape split-window -hf "htop"

# copy/paste buffer and clipboard management
set-option -s set-clipboard on

# allow clipboard setting via xterm escape sequence
set -gas terminal-overrides ',rxvt-unicode-256color:Ms=\E]52;%p1%s;%p2%s\007'

# post-version-2.4 configuration:
# if -b "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 4 \)'" 'bind-key -Tcopy-mode-vi v send -X begin-selection; bind-key -Tcopy-mode-vi y send -X copy-selection-and-cancel'

# pre-version-2.4 configuration:
# if -b '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 4\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'bind-key -t vi-copy v begin-selection; bind-key -t vi-copy y copy-selection'

unbind v
bind v copy-mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection

bind -T copy-mode-vi MouseDrag1Pane select-pane \; send -X begin-selection

unbind p
bind p paste-buffer

# Linux and FreeBSD clipboard support
if -b "uname | grep -qE 'Linux|FreeBSD'" {
    bind -T copy-mode-vi Y send -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
    bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"

    bind P run -b "xsel -o | tmux load-buffer - ; tmux paste-buffer"

    # a quicker way to copy the word under cursor to system clipboard
    bind MouseDown3Pane copy-mode \; send -X clear-selection \; send -X begin-selection \; send -X select-word \; send -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
}

# Mac OS X clipboard support
if -b "uname | grep -q Darwin" {
    bind -T copy-mode-vi Y send -X copy-pipe-and-cancel "pbcopy"
    bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"

    bind P run -b "pbpaste | tmux load-buffer - ; tmux paste-buffer"

    # a quicker way to copy the word under cursor to system clipboard
    bind MouseDown3Pane copy-mode \; send -X clear-selection \; send -X begin-selection \; send -X select-word \; send -X copy-pipe-and-cancel "pbcopy"
}

bind -T copy-mode-vi Enter send -X copy-selection-and-cancel \; paste-buffer
bind -T copy-mode-vi M-Enter send -X begin-selection \; send -X select-word \; send -X copy-selection-and-cancel \; paste-buffer

# a quicker way to enter copy mode and navigate to the character pointed to by mouse cursor
bind MouseDown1Pane copy-mode \; send -X clear-selection

bind S set-window-option synchronize-panes  # on/off toggle

# provide an alternative way to input functional keys (F1..F10) and other keys not present on all keyboards
bind BSpace switch-client -T xkeys

bind -r -T xkeys 1 send-keys F1
bind -r -T xkeys 2 send-keys F2
bind -r -T xkeys 3 send-keys F3
bind -r -T xkeys 4 send-keys F4
bind -r -T xkeys 5 send-keys F5
bind -r -T xkeys 6 send-keys F6
bind -r -T xkeys 7 send-keys F7
bind -r -T xkeys 8 send-keys F8
bind -r -T xkeys 9 send-keys F9
bind -r -T xkeys 0 send-keys F10

bind -r -T xkeys '!' send-keys M-F1
bind -r -T xkeys '@' send-keys M-F2
bind -r -T xkeys '#' send-keys M-F3
bind -r -T xkeys '$' send-keys M-F4
bind -r -T xkeys '%' send-keys M-F5
bind -r -T xkeys '^' send-keys M-F6
bind -r -T xkeys '&' send-keys M-F7
bind -r -T xkeys '*' send-keys M-F8
bind -r -T xkeys '(' send-keys M-F9
bind -r -T xkeys ')' send-keys M-F10

# use these shortcuts to use current pane/window directory for new windows and panes
bind c new-window -c '#{pane_current_path}'
bind Enter new-window -c '#{pane_current_path}'

bind '\' split-window -h -c '#{pane_current_path}' \; display-panes
bind '-' split-window -v -c '#{pane_current_path}' \; display-panes

bind '=' select-layout tiled \; display-panes
bind '|' select-layout even-horizontal \; display-panes
bind '_' select-layout even-vertical \; display-panes

unbind '['
unbind '['
bind -r '[' select-window -t -1 \; display-panes
bind -r ']' select-window -t +1 \; display-panes

bind 1 select-window -t 1 \; display-panes
bind 2 select-window -t 2 \; display-panes
bind 3 select-window -t 3 \; display-panes
bind 4 select-window -t 4 \; display-panes
bind 5 select-window -t 5 \; display-panes
bind 6 select-window -t 6 \; display-panes
bind 7 select-window -t 7 \; display-panes
bind 8 select-window -t 8 \; display-panes
bind 9 select-window -t 9 \; display-panes
bind 0 select-window -t 10 \; display-panes

bind M-1 select-window -t 1 \; display-panes
bind M-2 select-window -t 2 \; display-panes
bind M-3 select-window -t 3 \; display-panes
bind M-4 select-window -t 4 \; display-panes
bind M-5 select-window -t 5 \; display-panes
bind M-6 select-window -t 6 \; display-panes
bind M-7 select-window -t 7 \; display-panes
bind M-8 select-window -t 8 \; display-panes
bind M-9 select-window -t 9 \; display-panes
bind M-0 select-window -t 10 \; display-panes

bind Tab last-window \; display-panes
bind M-Tab last-window \; display-panes

unbind '{'
unbind '}'
bind -r '{' swap-window -d -t -1 \; display-panes
bind -r '}' swap-window -d -t +1 \; display-panes

# duplicate pane motion bindings without arrow keys;

bind -r M-h select-pane -L \; display-panes
bind -r M-j select-pane -D \; display-panes
bind -r M-k select-pane -U \; display-panes
bind -r M-l select-pane -R \; display-panes

# pane resizing (without arrow keys)

bind -r M-< resize-pane -L 4
bind -r M-> resize-pane -R 4
bind -r M-( resize-pane -U 4
bind -r M-) resize-pane -D 4

# pane resizing (with arrow keys, slightly tweaked)

bind -r M-Up resize-pane -U 4
bind -r M-Down resize-pane -D 4
bind -r M-Left resize-pane -L 4
bind -r M-Right resize-pane -R 4

# pane rearrangemenet bindings, borrowed from https://stackoverflow.com/a/27450841
# "flipping the orientation of the current pane with the pane before it (in the ordering)"
bind M-f move-pane -t '.-' \; display-panes
bind M-r move-pane -h -t '.-' \; display-panes

# audio control bindings use their own prefix
bind '`' switch-client -T audio

# audio volume control

bind -T audio '`' new-window "sp-audio-volume-control"

bind -r -T audio '[' run "sp-decrease-audio-volume"
bind -r -T audio ']' run "sp-increase-audio-volume"

bind -r -T audio Down run "sp-decrease-audio-volume"
bind -r -T audio Up run "sp-increase-audio-volume"

bind -r -T audio '\' run "sp-toggle-audio-mute"

# audio volume control (PulseAudio/Linux)

if -b "uname | grep -q Linux" {
    bind -r -T audio 1 run "pactl set-sink-volume @DEFAULT_SINK@ 10%"
    bind -r -T audio 2 run "pactl set-sink-volume @DEFAULT_SINK@ 20%"
    bind -r -T audio 3 run "pactl set-sink-volume @DEFAULT_SINK@ 30%"
    bind -r -T audio 4 run "pactl set-sink-volume @DEFAULT_SINK@ 40%"
    bind -r -T audio 5 run "pactl set-sink-volume @DEFAULT_SINK@ 50%"
    bind -r -T audio 6 run "pactl set-sink-volume @DEFAULT_SINK@ 60%"
    bind -r -T audio 7 run "pactl set-sink-volume @DEFAULT_SINK@ 70%"
    bind -r -T audio 8 run "pactl set-sink-volume @DEFAULT_SINK@ 80%"
    bind -r -T audio 9 run "pactl set-sink-volume @DEFAULT_SINK@ 90%"
    bind -r -T audio 0 run "pactl set-sink-volume @DEFAULT_SINK@ 100%"

    # audio volume control (ALSA/Linux)

    # bind -r -T audio 1 run "amixer -D pulse set Master 10%"
    # bind -r -T audio 2 run "amixer -D pulse set Master 20%"
    # bind -r -T audio 3 run "amixer -D pulse set Master 30%"
    # bind -r -T audio 4 run "amixer -D pulse set Master 40%"
    # bind -r -T audio 5 run "amixer -D pulse set Master 50%"
    # bind -r -T audio 6 run "amixer -D pulse set Master 60%"
    # bind -r -T audio 7 run "amixer -D pulse set Master 70%"
    # bind -r -T audio 8 run "amixer -D pulse set Master 80%"
    # bind -r -T audio 9 run "amixer -D pulse set Master 90%"
    # bind -r -T audio 0 run "amixer -D pulse set Master 100%"
}

# audio volume control (OSS/FreeBSD)

if -b "uname | grep -q FreeBSD" {
    bind -r -T audio 1 run "mixer vol 10"
    bind -r -T audio 2 run "mixer vol 20"
    bind -r -T audio 3 run "mixer vol 30"
    bind -r -T audio 4 run "mixer vol 40"
    bind -r -T audio 5 run "mixer vol 50"
    bind -r -T audio 6 run "mixer vol 60"
    bind -r -T audio 7 run "mixer vol 70"
    bind -r -T audio 8 run "mixer vol 80"
    bind -r -T audio 9 run "mixer vol 90"
    bind -r -T audio 0 run "mixer vol 100"
}

# audio volume control (Mac OS X)

if -b "uname | grep -q Darwin" {
    bind -r -T audio 1 run "osascript -e 'set volume output volume 10'"
    bind -r -T audio 2 run "osascript -e 'set volume output volume 20'"
    bind -r -T audio 3 run "osascript -e 'set volume output volume 30'"
    bind -r -T audio 4 run "osascript -e 'set volume output volume 40'"
    bind -r -T audio 5 run "osascript -e 'set volume output volume 50'"
    bind -r -T audio 6 run "osascript -e 'set volume output volume 60'"
    bind -r -T audio 7 run "osascript -e 'set volume output volume 70'"
    bind -r -T audio 8 run "osascript -e 'set volume output volume 80'"
    bind -r -T audio 9 run "osascript -e 'set volume output volume 90'"
    bind -r -T audio 0 run "osascript -e 'set volume output volume 100'"
}

# mpd song playback controls
bind -T audio '~' new-window "ncmpcpp"

bind -T audio -r '{' run "mpc prev"
bind -T audio -r '}' run "mpc next"

bind -T audio -r Left run "mpc prev"
bind -T audio -r Right run "mpc next"

bind -T audio '|' run "mpc toggle"

# ------------
# tmux plugins
# ------------

set -g @open 'O'
set -g @open-editor 'C-o'
set -g @open-S 'https://www.duckduckgo.com/'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'thewtex/tmux-mem-cpu-load'

# automatically install tmux plugin manager if it's not installed yet
#if "test ! -d ~/.tmux/plugins/tpm" \
#   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run '~/.tmux/plugins/tpm/tpm'
