" Initialize plugins first (some of the further configuration depends on it)
if has("win32")
    source ~/vimfiles/plugins.vim
else
    source ~/.vim/plugins.vim
endif

""" ---------------
""" GENERAL OPTIONS
""" ---------------

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set encoding=utf-8
set fileencoding=utf-8

" configure alternative keyboard layout for Latin characters with diacritics
" (using dead characters as configured in keymap/accents.vim)
set keymap=accents
" but do not enable alternative layout right away (Use ^^/Ctrl+6 to switch)
" 0 == :lmap is off and IM is off
set iminsert=0
" -1 == re-use the value of iminsert
set imsearch=-1

" double star makes :find look for files recursively
if has("win32")
    "FIXME set path=.,/usr/local/include,/usr/include,,**
else
    set path=.,/usr/local/include,/usr/include,,**
endif

" even though we define our mappings in other files, we need to make sure
" that leader and local leader keys are established well before then
let mapleader = "-"
let maplocalleader = "--"

set number " enable line numbers
set scrolloff=1 " keep at least one line visible above/below cursor
set ruler " show the cursor position all the time
set rulerformat=%l:%c%V

set laststatus=2 " always display status line, even with one file being edited
set statusline=%1*%m%r%*\ %f\ %3*%{fugitive#statusline()}%9*\ %y%{ObsessionStatus()}\ %=%{tabpagenr()}:#%n\ \"%{v:register}\ u%B/%{&fenc}/%{&ff}\ %l:%c%V\ %p%%/%L

if has("nvim")
    autocmd TermOpen * setlocal statusline=%*%{b:term_title}%9*%=#%n\ %l:%c%V\ %p%%/%L
endif

set tabline=%!SPTabLine()

set autoread " automatically reload files changed by external programs
au CursorHold,CursorHoldI * :checktime " check for updates each time cursor stops moving
au FocusGained,BufEnter * :checktime

set undofile " persist undo history between invocations
if has("win32")
    set undodir=~/vimfiles/undo " location for persistent undo history files
else
    set undodir=~/.vim/undo " location for persistent undo history files
endif

" do not save undo history for temporary files
augroup vimrc
    autocmd!
    autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

set showcmd " display incomplete commands
set history=100 " keep this many lines of command line history

set incsearch " do incremental searching
set hlsearch " highlight search results
set nowrapscan " do not wrap after search results are exhausted

if has("nvim")
    set inccommand=nosplit " highlight text affected by a substitute command
endif

set mouse=a " enable mouse use in all modes

" copy to clipboard by default
set clipboard^=unnamedplus
set clipboard^=unnamed

set expandtab
set tabstop=4
set shiftwidth=4
set autoindent

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("nvim") || (version >= 810)
    " increase default terminal scrollback size
    set scrollback=100000
endif

" apply omni autocompletion when pressing <Tab> (used by supertab plugin)
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
" do not autocomplete at the start of the line, after a comma or after a space:
let g:SuperTabNoCompleteAfter = ['^', ',', '\s']
set completeopt=longest,menuone
set completefunc=LanguageClient#complete
set omnifunc=v:lua.vim.lsp.omnifunc

" command mode autocompletion
set wildmode=list:longest,full
set wildmenu

" highlight tabs and trailing spaces
set listchars=tab:>.,trail:.
set list

" use a Unicode U2551 character (double vertical bar) for vertical split separator
set fillchars+=vert:║

" netrw browser uses tabs to display file lists and this looks really bad
" with tab highlighting
autocmd FileType netrw set nolist

" fold based on syntax, do not fold by default
set foldmethod=syntax
set foldlevel=100

" git diff -b mode (ignore whitespace changes)
set diffopt+=iwhite
set diffexpr=""

set colorcolumn=80,120
set cursorline
set cursorcolumn

set tags=./tags;/

" use rg (ripgrep) instead of grep, for faster searches
set grepprg=rg\ -L\ --sort\ path\ --ignore\ --hidden\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" consider dashes as parts of a word (for CSS, lisps, package names etc.)
set iskeyword+=-

" pressing K in normal/visual mode will look up the word/selection using this command
set keywordprg=:grep\ -ws

autocmd FileType vim setlocal keywordprg=:help
autocmd FileType sh setlocal keywordprg=:Man

let g:tagbar_width=60
let g:tagbar_show_linenumbers=1 " show absolute line numbers
let g:tagbar_map_help='<F1>' " do not use ? for help, we need it for reverse search in the window

let g:NERDTreeMapHelp='<F1>' " do not use ? for help, we need it for reverse search in the window
let g:NERDTreeShowLineNumbers=1
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize=64
let g:NERDTreeQuitOnOpen=1 " close NERDtree window after opening a file

if has("nvim")
lua << EOF
    require'scrollbar'.setup()
EOF
endif

" Language Server Protocol support (generic)

" Neovim-specific built-in LSP client configuration
if has("nvim")
lua << EOF
    lspconfig = require'lspconfig'

    -- rls (Rust)
    lspconfig.rls.setup{}

    -- ccls (C++)
    lspconfig.ccls.setup{}

    -- clangd (C++)
    lspconfig.clangd.setup{}
EOF
endif

" to be able to use vim's formatting commands like gq with LanguageClient
set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()

" LanguageClient global settings

" Automatically start language servers.
let g:LanguageClient_autoStart = 1

" let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')
let g:LanguageClient_loadSettings = 1

" Use an absolute configuration path if you want system-wide settings
" (.vim/settings.json is used by default)
" let g:LanguageClient_settingsPath = expand('~/.config/nvim/settings.json')

" https://github.com/autozimu/LanguageClient-neovim/issues/379 LSP snippet is not supported
"let g:LanguageClient_hasSnippetSupport = 0

let g:LanguageClient_diagnosticsList = "Location"

" Install Rust language server using a command like:
" $ rustup component add rls --toolchain stable-x86_64-unknown-linux-gnu
" (adjust toolchain accordingly)

" Use these lines to use ccls as a language server for the C family of languages:
    " \ 'c': ['ccls', '--log-file=/tmp/cc.log'],
    " \ 'cpp': ['ccls', '--log-file=/tmp/cc.log'],
    " \ 'objc': ['ccls', '--log-file=/tmp/cc.log'],
    " \ 'objcpp': ['ccls', '--log-file=/tmp/cc.log'],

let g:LanguageClient_serverCommands = {
    \ 'haskell': ['hie', '--lsp'],
    \ 'purescript': ['purescript-language-server', '--stdio'],
    \ 'elm': ['elm-language-server', '--stdio'],
    \ 'typescript': ['typescript-language-server', '--stdio'],
    \ 'typescript.tsx': ['typescript-language-server', '--stdio'],
    \ 'javascript': ['typescript-language-server', '--stdio'],
    \ 'javascript.jsx': ['typescript-language-server', '--stdio'],
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'c': ['clangd'],
    \ 'cpp': ['clangd'],
    \ 'objc': ['clangd'],
    \ 'objcpp': ['clangd'],
    \ 'java': ['tcp://127.0.0.1:55555'],
    \ }

" register C/C++/Objective C LSP server for vim-lsp plugin
" (the -background-index option is not available in clangd-7)
        " \ 'cmd': {server_info->['clangd', '-background-index']},
" if executable('clangd')
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'clangd',
"         \ 'cmd': {server_info->['clangd']},
"         \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
"         \ })
" endif

" Register ccls C++ lanuage server.
if executable('ccls')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'ccls',
      \ 'cmd': {server_info->['ccls']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': {'cache': {'directory': expand('~/.cache/ccls') }},
      \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
      \ })
endif

" register TypeScript LSP server for vim-lsp plugin
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ })
endif

" register Purescript LSP server for vim-lsp plugin
if executable('purescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'purescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'purescript-language-server --stdio']},
        \ 'whitelist': ['purescript'],
        \ })
endif

" register Elm LSP server for vim-lsp plugin
if executable('elm-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'elm-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'elm-language-server --stdio']},
        \ 'whitelist': ['elm'],
        \ })
endif

" git gutter: pass this option to git diff
let g:gitgutter_diff_args = '-w'

" use detailed listing style for netrw
let g:netrw_liststyle = 1

let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:100'
let g:ctrlp_extensions = [
\ 'tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
\ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir'
\ ]

set pastetoggle=<Leader>P

augroup BgHighlight
    autocmd!

    autocmd WinEnter * set colorcolumn=80,120
    autocmd WinEnter * set cursorline
    autocmd WinEnter * set cursorcolumn

    autocmd WinLeave * set colorcolumn=0
    autocmd WinLeave * set nocursorline
    autocmd WinLeave * set nocursorcolumn

augroup END

""" -------------------------------
""" MISCELLANEOUS STUFF AND PLUGINS
""" -------------------------------

" remember edit position and jump to it next time the same file is edited
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if exists("syntax_on")
  syntax reset
endif

" Clear filetype flags before changing runtimepath to force Vim to reload them.
if exists("g:did_load_filetypes")
    filetype off
    filetype plugin indent off
endif

" automatically pick correct templates based on the specified file name extension
augroup templates
  au!
  autocmd BufNewFile *.* silent! execute '0r ~/templates/vim-template.'.expand("<afile>:e")
augroup END

au BufReadCmd *.epub call zip#Browse(expand("<amatch>"))

filetype plugin indent on
syntax on

if has("win32")
    source ~/vimfiles/startup/functions.vim
    source ~/vimfiles/startup/commands.vim
else
    source ~/.vim/startup/functions.vim
    source ~/.vim/startup/commands.vim
endif

" this is useful for nested terminals, to make them use the existing nvim instance, if available
if has("nvim") && executable("nvr")
    let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif

" -------------------
" GENERAL UI SETTINGS
" -------------------

set guioptions-=L " Don't add left-hand scrollbar on split
set guioptions-=R " Dont' add right-hand scrollbar on split
set guioptions-=l " Disable Left-hand scrollbar always
set guioptions-=r " Disable right-hand scrollbar always
set guioptions-=m " Remove menu bar
set guioptions-=T " Remove toolbarset guioptions-=T " remove toolbar

set guifont=Inconsolata:h11

if $TERM == "linux"
\ || $TERM == "screen-256color"
\ || $TERM == "xterm-256color"
\ || $TERM == "rxvt-unicode-256color"
\ || $COLORTERM == "xfce4-terminal"
\ || $COLORTERM == "gnome-terminal"
\ || $COLORTERM == "Terminal"
  set t_Co=256

  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" if we're in non-tty tmux session running neovim,
" we may try using 24-bit GUI color scheme settings directly
if has("nvim") && $TMUX != "" && $TERM != "linux"
    " nvim is compiled with this feature, vim is most likely not
    " this setting may seem to conflict with the above
    " but since 24-bit colors are automatically mapped to their closest
    " 256-color counterparts, we may get away with this,
    " and this will work best in terminals with true 24-bit color support
    set termguicolors
endif

" make sure tmux correctly passes DECSCUSR cursor shape change sequences
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
  let &t_SI = "\e[5 q"
  let &t_EI = "\e[2 q"
endif

" FIXME Uncomment when it's clear how to make this work with urxvt...
" if &term =~ '^xterm\\|rxvt'
"   " use an orange cursor in insert mode
"   let &t_SI = "\<Esc>]12;orange\x7"
"   " use a red cursor otherwise
"   let &t_EI = "\<Esc>]12;red\x7"
"   silent !echo -ne "\033]12;red\007"
"   " reset cursor when vim exits
"   autocmd VimLeave * silent !echo -ne "\033]112\007"
"   " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
"
"   " solid underscore
"   let &t_SI .= "\<Esc>[4 q"
"   " solid block
"   let &t_EI .= "\<Esc>[2 q"
"   " 1 or 0 -> blinking block
"   " 3 -> blinking underscore
"   " Recent versions of xterm (282 or above) also support
"   " 5 -> blinking vertical bar
"   " 6 -> solid vertical bar
" endif

" use a dark theme by default (there's a shortcut to quickly switch it, if needed)
" (one other option may be to have the "if &termguicolors" check for auto detection)
colorscheme sergebass-dark

" try to use transparent background, if supported (see background erasure (BCE) mode in terminals)
if !(exists("g:GuiLoaded") || has("gui_running")) " GUI vim/neovim versions don't support transparent backgrounds
    hi Normal ctermbg=NONE guibg=NONE
endif

" FIXME replace rainbow parenthese plugin with the one from
" https://github.com/luochen1990/rainbow (hopefully this works properly)
"
" chevron matching mode conflicts with XHTML highlighting so disable it for now
"au Syntax * RainbowParenthesesLoadChevrons
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

au VimEnter * RainbowParenthesesToggle

" Force .h and .inl files to be treated as C++ headers
au BufReadPost *.h set filetype=cpp
au BufReadPost *.inl set filetype=cpp

au BufReadPost *.nasm set filetype=asm

au BufReadPost *.gdb set filetype=gdb

" Frege sources are very much Haskell-like
au BufReadPost *.fr set filetype=frege syntax=haskell

" Special configuration files
au BufReadPost */.xmobarrc set filetype=haskell
au BufReadPost */gitconfig set filetype=gitconfig
au BufReadPost */_gitconfig set filetype=gitconfig
au BufReadPost */.vrapperrc set filetype=vim

au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl set filetype=glsl

autocmd FileType json syntax match Comment +\/\/.\+$+

" do not use sandboxing for local vim scripts (a bit less secure but much less bothersome either)
let g:localvimrc_sandbox=0

" trust all .lvimrc scripts under our home directory
let g:localvimrc_whitelist=[expand("~")]

" vim-qf: do not shorten paths in quickfix/local lists
let g:qf_shorten_path = 0

" Emoji abbreviations
ab :smile: 😄
ab :wink: 😉
ab :grin: 😁
ab :astonished: 😲
ab :cry: 😢

" Emoji abbreviations from https://stackoverflow.com/a/59757067
ab :white_check_mark: ✅
ab :warning: ⚠
ab :bulb: 💡
ab :pushpin: 📌
ab :bomb: 💣
ab :pill: 💊
ab :construction: 🚧
ab :pencil: 📝
ab :point_right: 👉
ab :book: 📖
ab :link: 🔗
ab :wrench: 🔧
ab :info: 🛈
ab :telephone: 📞
ab :email: 📧
ab :computer: 💻
